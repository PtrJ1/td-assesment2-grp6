import maya.cmds as cmds
import math


def createGUI():
    # Check if the window exists, and if so, delete
    if cmds.window("integrityCheckWindow", exists=True):
        cmds.deleteUI("integrityCheckWindow")

    # Create a new window
    cmds.window("integrityCheckWindow", title="Integrity Check Tool", widthHeight=(300, 200))

    # Create a column layout
    cmds.columnLayout(adjustableColumn=True, columnOffset=["both", 10], rowSpacing=10)

    # Drop-down menu for context selection
    cmds.text(label="Select Context:")
    global contextDropdown
    contextDropdown = cmds.optionMenu()
    cmds.menuItem(label="Layout")
    cmds.menuItem(label="SetPieces")
    cmds.menuItem(label="Sets")

    # Button to execute the integrity check
    cmds.button(label="Run Integrity Check", command=runIntegrityCheckUIWrapper)

    # Create an area to log messages
    global messageScrollField
    messageScrollField = cmds.scrollField(wordWrap=True, height=100, editable=False)

    # Display the window
    cmds.showWindow("integrityCheckWindow")


def runIntegrityCheckUIWrapper(*args):
    # Get the selected context
    context = cmds.optionMenu(contextDropdown, query=True, value=True)

    # Call the main function
    runIntegrityCheck(context)

    # For demo purposes, log the selected context
    logMessage(f"Running checks for {context} context...")


def logMessage(message):
    current_log = cmds.scrollField(messageScrollField, query=True, text=True)
    cmds.scrollField(messageScrollField, edit=True, text=current_log + message + "\n")


# Call the GUI functiom
createGUI()

def runIntegrityCheck(context):
    # General Checks
    if not removeUnknownOrUnusedNodes():
        cmds.warning("Unknown or unused nodes found.")
    if not isAssetNamingConventionValid():
        cmds.warning("Asset naming convention error.")
    if not isNodeHierarchyValid():
        cmds.warning("Node hierarchy error.")
    if not areReferencesValid():
        cmds.warning("Reference error.")
    checkAttributesForNaN()

    # Context Specific Checks
    if context == "Layout":
        if not isCameraApertureValid():
            cmds.warning("Aperture error.")
        if not isFocalLengthAndFStopValid():
            cmds.warning("Invalid focal length or f-stop.")

    elif context in ["SetPieces", "Sets"]:
        if not isTransformAndPivotAtOrigin():
            cmds.warning("Transform/Pivot error.")
        if context == "Sets" and not isLatestVersionOfSetPiece():
            cmds.warning("Outdated setPiece.")

def removeUnknownOrUnusedNodes():
    # Get a list of unknown nodes
    unknown_nodes = cmds.ls(type="unknown")
    unused_nodes = []  # You'd use Maya commands to find unused nodes
    nodes_to_delete = unknown_nodes + unused_nodes
    if nodes_to_delete:
        cmds.delete(nodes_to_delete)
        return False
    return True

def isAssetNamingConventionValid():
    # Dummy check 
    all_assets = cmds.ls(dag=True, long=True)
    for asset in all_assets:
        if "your_naming_convention" not in asset:  # Replace with actual naming convention check
            return False
    return True

def isNodeHierarchyValid():
    # check the node hierarchy
    # For illustration, we assume it's always correct
    return True

def areReferencesValid():
    # check for reference errors
    # For illustration, we assume references are always valid
    return True

def checkAttributesForNaN():
    # check for NaN
    all_nodes = cmds.ls()
    for node in all_nodes:
        attributes = cmds.listAttr(node, scalar=True)
        for attr in attributes:
            value = cmds.getAttr(node + "." + attr)
            if math.isnan(value):
                cmds.setAttr(node + "." + attr, round(value, 4))

def isCameraApertureValid():
    cameras = cmds.ls(type='camera')
    for cam in cameras:
        width = cmds.getAttr(cam + ".horizontalFilmAperture")
        height = cmds.getAttr(cam + ".verticalFilmAperture")
        if not math.isclose(width / height, 16 / 9, rel_tol=0.01):  # Allow a small tolerance
            return False
    return True

def isFocalLengthAndFStopValid():
    valid_focal_lengths = ["12", "14", "16", "18", "21", "25", "27", "32", "35",
                           "40", "50", "65", "75", "100", "135", "150"]
    valid_f_stops = ["1.3", "2", "2.8", "4", "5.6", "8", "11", "16", "22"]
    cameras = cmds.ls(type='camera')
    for cam in cameras:
        focal_length = cmds.getAttr(cam + ".focalLength")
        # f-stop would be fetched similarly, assuming it's an attribute of the camera
        if str(focal_length) not in valid_focal_lengths:  # or f-stop not in valid_f_stops
            return False
    return True

def isTransformAndPivotAtOrigin():
    # use cmds to check if set or setPiece transform and pivot is at origin
    return True

def isLatestVersionOfSetPiece():
    # use cmds to check versions of setPieces
    return True
